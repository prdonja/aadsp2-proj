1     	 0000					.extern _degree
2     	 0000					.extern _gain
3     	 0000					.extern _invertEnable
4     	 0000					.public _sampleBuffer
5     	 0000					.extern _audio_invert_init
6     	 0000					.extern _cl_wavread_bits_per_sample
7     	 0000					.extern _cl_wavread_close
8     	 0000					.extern _cl_wavread_frame_rate
9     	 0000					.extern _cl_wavread_getnchannels
10    	 0000					.extern _cl_wavread_number_of_frames
11    	 0000					.extern _cl_wavread_open
12    	 0000					.extern _cl_wavread_recvsample
13    	 0000					.extern _cl_wavwrite_close
14    	 0000					.extern _cl_wavwrite_open
15    	 0000					.extern _cl_wavwrite_sendsample
16    	 0000					.public _main
17    	 0000					.extern _printf
18    	 0000					.extern _processing
19    	 0000					.extern _strcpy
20    	 0000					.extern __div
21    							.xdata_ovly
21     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
22    	 0000				__extractedConst_0_1
23    	 0000					.dw  (0x7fffffff)
	 0000	 7FFFFFFF	 
24    							.ydata_ovly
24     >> start of macro: .ydata_ovly
1+    									seg_single , "Y_OVLY", Y
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_Y_ )
2+    						    segment
3+    						  .else
4+    						    segment "Y_OVLY"
5+    							.if "" != ""
6+    						___SegStart_Y_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .ydata_ovly
25    	 0000				_sampleBuffer
26    	 0000					.bss (0x80)
27    							.xdata_ovly
27     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
28    	 0000				_string_const_0
29    	 0000					.dw  (0x2e)
	 0000	 0000002E	 
30    	 0001					.dw  (0x2e)
	 0001	 0000002E	 
31    	 0002					.dw  (0x2f)
	 0002	 0000002F	 
32    	 0003					.dw  (0x54)
	 0003	 00000054	 
33    	 0004					.dw  (0x6f)
	 0004	 0000006F	 
34    	 0005					.dw  (0x6e)
	 0005	 0000006E	 
35    	 0006					.dw  (0x65)
	 0006	 00000065	 
36    	 0007					.dw  (0x5f)
	 0007	 0000005F	 
37    	 0008					.dw  (0x4c)
	 0008	 0000004C	 
38    	 0009					.dw  (0x31)
	 0009	 00000031	 
39    	 000A					.dw  (0x6b)
	 000A	 0000006B	 
40    	 000B					.dw  (0x5f)
	 000B	 0000005F	 
41    	 000C					.dw  (0x52)
	 000C	 00000052	 
42    	 000D					.dw  (0x33)
	 000D	 00000033	 
43    	 000E					.dw  (0x6b)
	 000E	 0000006B	 
44    	 000F					.dw  (0x2e)
	 000F	 0000002E	 
45    	 0010					.dw  (0x77)
	 0010	 00000077	 
46    	 0011					.dw  (0x61)
	 0011	 00000061	 
47    	 0012					.dw  (0x76)
	 0012	 00000076	 
48    	 0013					.dw  (0x0)
	 0013	 00000000	 
49    							.xdata_ovly
49     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
50    	 0000				_string_const_1
51    	 0000					.dw  (0x45)
	 0000	 00000045	 
52    	 0001					.dw  (0x72)
	 0001	 00000072	 
53    	 0002					.dw  (0x72)
	 0002	 00000072	 
54    	 0003					.dw  (0x6f)
	 0003	 0000006F	 
55    	 0004					.dw  (0x72)
	 0004	 00000072	 
56    	 0005					.dw  (0x3a)
	 0005	 0000003A	 
57    	 0006					.dw  (0x20)
	 0006	 00000020	 
58    	 0007					.dw  (0x43)
	 0007	 00000043	 
59    	 0008					.dw  (0x6f)
	 0008	 0000006F	 
60    	 0009					.dw  (0x75)
	 0009	 00000075	 
61    	 000A					.dw  (0x6c)
	 000A	 0000006C	 
62    	 000B					.dw  (0x64)
	 000B	 00000064	 
63    	 000C					.dw  (0x20)
	 000C	 00000020	 
64    	 000D					.dw  (0x6e)
	 000D	 0000006E	 
65    	 000E					.dw  (0x6f)
	 000E	 0000006F	 
66    	 000F					.dw  (0x74)
	 000F	 00000074	 
67    	 0010					.dw  (0x20)
	 0010	 00000020	 
68    	 0011					.dw  (0x6f)
	 0011	 0000006F	 
69    	 0012					.dw  (0x70)
	 0012	 00000070	 
70    	 0013					.dw  (0x65)
	 0013	 00000065	 
71    	 0014					.dw  (0x6e)
	 0014	 0000006E	 
72    	 0015					.dw  (0x20)
	 0015	 00000020	 
73    	 0016					.dw  (0x77)
	 0016	 00000077	 
74    	 0017					.dw  (0x61)
	 0017	 00000061	 
75    	 0018					.dw  (0x76)
	 0018	 00000076	 
76    	 0019					.dw  (0x65)
	 0019	 00000065	 
77    	 001A					.dw  (0x66)
	 001A	 00000066	 
78    	 001B					.dw  (0x69)
	 001B	 00000069	 
79    	 001C					.dw  (0x6c)
	 001C	 0000006C	 
80    	 001D					.dw  (0x65)
	 001D	 00000065	 
81    	 001E					.dw  (0x2e)
	 001E	 0000002E	 
82    	 001F					.dw  (0xa)
	 001F	 0000000A	 
83    	 0020					.dw  (0x0)
	 0020	 00000000	 
84    							.xdata_ovly
84     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
85    	 0000				_string_const_2
86    	 0000					.dw  (0x2e)
	 0000	 0000002E	 
87    	 0001					.dw  (0x2e)
	 0001	 0000002E	 
88    	 0002					.dw  (0x2f)
	 0002	 0000002F	 
89    	 0003					.dw  (0x54)
	 0003	 00000054	 
90    	 0004					.dw  (0x6f)
	 0004	 0000006F	 
91    	 0005					.dw  (0x6e)
	 0005	 0000006E	 
92    	 0006					.dw  (0x65)
	 0006	 00000065	 
93    	 0007					.dw  (0x5f)
	 0007	 0000005F	 
94    	 0008					.dw  (0x4c)
	 0008	 0000004C	 
95    	 0009					.dw  (0x31)
	 0009	 00000031	 
96    	 000A					.dw  (0x6b)
	 000A	 0000006B	 
97    	 000B					.dw  (0x5f)
	 000B	 0000005F	 
98    	 000C					.dw  (0x52)
	 000C	 00000052	 
99    	 000D					.dw  (0x33)
	 000D	 00000033	 
100   	 000E					.dw  (0x6b)
	 000E	 0000006B	 
101   	 000F					.dw  (0x6f)
	 000F	 0000006F	 
102   	 0010					.dw  (0x75)
	 0010	 00000075	 
103   	 0011					.dw  (0x74)
	 0011	 00000074	 
104   	 0012					.dw  (0x2e)
	 0012	 0000002E	 
105   	 0013					.dw  (0x77)
	 0013	 00000077	 
106   	 0014					.dw  (0x61)
	 0014	 00000061	 
107   	 0015					.dw  (0x76)
	 0015	 00000076	 
108   	 0016					.dw  (0x0)
	 0016	 00000000	 
109   							.xdata_ovly
109    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
110   	 0000				_string_const_3
111   	 0000					.dw  (0x45)
	 0000	 00000045	 
112   	 0001					.dw  (0x72)
	 0001	 00000072	 
113   	 0002					.dw  (0x72)
	 0002	 00000072	 
114   	 0003					.dw  (0x6f)
	 0003	 0000006F	 
115   	 0004					.dw  (0x72)
	 0004	 00000072	 
116   	 0005					.dw  (0x3a)
	 0005	 0000003A	 
117   	 0006					.dw  (0x20)
	 0006	 00000020	 
118   	 0007					.dw  (0x43)
	 0007	 00000043	 
119   	 0008					.dw  (0x6f)
	 0008	 0000006F	 
120   	 0009					.dw  (0x75)
	 0009	 00000075	 
121   	 000A					.dw  (0x6c)
	 000A	 0000006C	 
122   	 000B					.dw  (0x64)
	 000B	 00000064	 
123   	 000C					.dw  (0x20)
	 000C	 00000020	 
124   	 000D					.dw  (0x6e)
	 000D	 0000006E	 
125   	 000E					.dw  (0x6f)
	 000E	 0000006F	 
126   	 000F					.dw  (0x74)
	 000F	 00000074	 
127   	 0010					.dw  (0x20)
	 0010	 00000020	 
128   	 0011					.dw  (0x6f)
	 0011	 0000006F	 
129   	 0012					.dw  (0x70)
	 0012	 00000070	 
130   	 0013					.dw  (0x65)
	 0013	 00000065	 
131   	 0014					.dw  (0x6e)
	 0014	 0000006E	 
132   	 0015					.dw  (0x20)
	 0015	 00000020	 
133   	 0016					.dw  (0x77)
	 0016	 00000077	 
134   	 0017					.dw  (0x61)
	 0017	 00000061	 
135   	 0018					.dw  (0x76)
	 0018	 00000076	 
136   	 0019					.dw  (0x65)
	 0019	 00000065	 
137   	 001A					.dw  (0x66)
	 001A	 00000066	 
138   	 001B					.dw  (0x69)
	 001B	 00000069	 
139   	 001C					.dw  (0x6c)
	 001C	 0000006C	 
140   	 001D					.dw  (0x65)
	 001D	 00000065	 
141   	 001E					.dw  (0x2e)
	 001E	 0000002E	 
142   	 001F					.dw  (0xa)
	 001F	 0000000A	 
143   	 0020					.dw  (0x0)
	 0020	 00000000	 
144   							.code_ovly
144    >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
145   						
146   						
147   						
148   							# This construction should ensure linking of crt0 in case when target is a standalone program without the OS
149   							.if defined(_OVLY_)
150   								.if .strcmp('standalone',_OVLY_)=0
151   								.if .strcmp('crystal32',_TARGET_FAMILY_)=0
152   	 0000							.extern __start         # dummy use of __start to force linkage of crt0
153   	 0000				dummy		.equ(__start)
154   								.else
155   									.extern __intvec         # dummy use of __intvec to force linkage of intvec
156   						dummy		.equ(__intvec)
157   								.endif
158   								.endif
159   							.endif
160   						
161   	 0000				_main:			/* LN: 12 | CYCLE: 0 | RULES: () */ 
162   	 0000	 BB540007		xmem[i7] = i7			# LN: 12 | 
163   	 0001	 020F7FFF		i7 += 1			# LN: 12 | 
164   	 0002	 8775020E		i7 = i7 + (0x20e)			# LN: 12 | 
165   	 0003	 91750001		i1 = i7 - (0x1)			# LN: 12 | 
166   	 0004	 98540001		xmem[i1] = a0h			# LN: 12 | 
167   	 0005	 91750002		i1 = i7 - (0x2)			# LN: 12 | 
168   	 0006	 B0540001		xmem[i1] = i0			# LN: 12 | 
169   	 0007				cline_12_0:			/* LN: 29 | CYCLE: 0 | RULES: () */ 
170   	 0007	 90750003		i0 = i7 - (0x3)			# LN: 29 | 
171   	 0008	 00004DC0		a0 = 0			# LN: 29 | 
172   	 0009	 98540000		xmem[i0] = a0h			# LN: 29 | 
173   	 000A	 80800026		do (0x8), label_end_93			# LN: 29 | 
174   	 000B				cline_29_0:			/* LN: 31 | CYCLE: 0 | RULES: () */ 
175   	 000B				label_begin_93:			/* LN: 29 | CYCLE: 0 | RULES: () */ 
176   	 000B	 90750004		i0 = i7 - (0x4)			# LN: 31 | 
177   	 000C	 00004DC0		a0 = 0			# LN: 31 | 
178   	 000D	 98540000		xmem[i0] = a0h			# LN: 31 | 
179   	 000E	 81000020		do (0x10), label_end_92			# LN: 31 | 
180   	 000F				cline_31_0:			/* LN: 33 | CYCLE: 0 | RULES: () */ 
181   	 000F				label_begin_92:			/* LN: 31 | CYCLE: 0 | RULES: () */ 
182   	 000F	 90750003		i0 = i7 - (0x3)			# LN: 33 | 
183   	 0010	 18404DC1		a0 = xmem[i0]; a1 = 0			# LN: 33, 33 | 
184   	 0011	 00004EC0		a0 = a0 << 4			# LN: 33 | 
185   	 0012	 48707FFF		i0 = a0			# LN: 33 | 
186   	 0013	 91750004		i1 = i7 - (0x4)			# LN: 33 | 
187   	 0014	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 33 | 
188   	 0015	 88140001		a0 = xmem[i1]			# LN: 33 | 
189   	 0016	 0C707FFF		b0 = i0			# LN: 33 | 
190   	 0017	 00004420		a0 = a0 + b0			# LN: 33 | 
191   	 0018	 98090030		AnyReg(i0, a0h)			# LN: 33 | 
192   	 0019	 00007FFF		nop #empty cycle
193   	 001A	 99D40000		ymem[i0] = a1h			# LN: 33 | 
194   	 001B				cline_33_0:			/* LN: 31 | CYCLE: 0 | RULES: () */ 
195   	 001B				init_latch_label_0:			/* LN: 34 | CYCLE: 0 | RULES: () */ 
196   	 001B	 90750004		i0 = i7 - (0x4)			# LN: 31 | 
197   	 001C	 88140000		a0 = xmem[i0]			# LN: 31 | 
198   	 001D	 894A0001		uhalfword(a1) = (0x1)			# LN: 31 | 
199   	 001E	 00004408		a0 = a0 + a1			# LN: 31 | 
200   	 001F	 90750004		i0 = i7 - (0x4)			# LN: 31 | 
201   	 0020				label_end_92:			# LN: 31 | CYCLE: 5 | RULES: ()
202   	 0020	 98540000		xmem[i0] = a0h			# LN: 31 | 
203   	 0021				cline_31_1:			/* LN: 29 | CYCLE: 0 | RULES: () */ 
204   	 0021				init_latch_label_1:			/* LN: 35 | CYCLE: 0 | RULES: () */ 
205   	 0021				for_end_1:			/* LN: 31 | CYCLE: 0 | RULES: () */ 
206   	 0021	 90750003		i0 = i7 - (0x3)			# LN: 29 | 
207   	 0022	 88140000		a0 = xmem[i0]			# LN: 29 | 
208   	 0023	 894A0001		uhalfword(a1) = (0x1)			# LN: 29 | 
209   	 0024	 00004408		a0 = a0 + a1			# LN: 29 | 
210   	 0025	 90750003		i0 = i7 - (0x3)			# LN: 29 | 
211   	 0026				label_end_93:			# LN: 29 | CYCLE: 5 | RULES: ()
212   	 0026	 98540000		xmem[i0] = a0h			# LN: 29 | 
213   	 0027				cline_29_1:			/* LN: 39 | CYCLE: 0 | RULES: () */ 
214   	 0027				for_end_0:			/* LN: 29 | CYCLE: 0 | RULES: () */ 
215   	 0027	 90750104		i0 = i7 - (260 - 0)			# LN: 39 | 
216   	 0028	 A1050000		i1 = (0) + (_string_const_0)			# LN: 39 | 
217   	 0029	 80880000		call (_strcpy)			# LN: 39 | 
218   	 002A				cline_39_0:			/* LN: 40 | CYCLE: 0 | RULES: () */ 
219   	 002A	 90750104		i0 = i7 - (260 - 0)			# LN: 40 | 
220   	 002B	 80880000		call (_cl_wavread_open)			# LN: 40 | 
221   	 002C	 98090030		AnyReg(i0, a0h)			# LN: 40 | 
222   	 002D	 91750105		i1 = i7 - (0x105)			# LN: 40 | 
223   	 002E	 B0540001		xmem[i1] = i0			# LN: 40 | 
224   	 002F				cline_40_0:			/* LN: 41 | CYCLE: 0 | RULES: () */ 
225   	 002F	 90750105		i0 = i7 - (0x105)			# LN: 41 | 
226   	 0030	 88140000		a0 = xmem[i0]			# LN: 41 | 
227   	 0031	 00004E80		a0 & a0			# LN: 41 | 
228   	 0032	 84480037		if (a != 0) jmp (else_0)			# LN: 41 | 
229   	 0033				cline_41_0:			/* LN: 43 | CYCLE: 0 | RULES: () */ 
230   	 0033	 A0050000		i0 = (0) + (_string_const_1)			# LN: 43 | 
231   	 0034	 80880000		call (_printf)			# LN: 43 | 
232   	 0035				cline_43_0:			/* LN: 44 | CYCLE: 0 | RULES: () */ 
233   	 0035	 886AFFFF		halfword(a0) = (0xffff)			# LN: 44 | 
234   	 0036	 800800DE		jmp (__epilogue_242)			# LN: 44 | 
235   	 0037				cline_44_0:			/* LN: 50 | CYCLE: 0 | RULES: () */ 
236   	 0037				endif_0:			/* LN: 41 | CYCLE: 0 | RULES: () */ 
237   	 0037				else_0:			/* LN: 41 | CYCLE: 0 | RULES: () */ 
238   	 0037	 90750105		i0 = i7 - (0x105)			# LN: 50 | 
239   	 0038	 B0140000		i0 = xmem[i0]			# LN: 50 | 
240   	 0039	 80880000		call (_cl_wavread_getnchannels)			# LN: 50 | 
241   	 003A	 90750106		i0 = i7 - (0x106)			# LN: 50 | 
242   	 003B	 98540000		xmem[i0] = a0h			# LN: 50 | 
243   	 003C				cline_50_0:			/* LN: 51 | CYCLE: 0 | RULES: () */ 
244   	 003C	 90750105		i0 = i7 - (0x105)			# LN: 51 | 
245   	 003D	 B0140000		i0 = xmem[i0]			# LN: 51 | 
246   	 003E	 80880000		call (_cl_wavread_bits_per_sample)			# LN: 51 | 
247   	 003F	 90750107		i0 = i7 - (0x107)			# LN: 51 | 
248   	 0040	 98540000		xmem[i0] = a0h			# LN: 51 | 
249   	 0041				cline_51_0:			/* LN: 52 | CYCLE: 0 | RULES: () */ 
250   	 0041	 90750105		i0 = i7 - (0x105)			# LN: 52 | 
251   	 0042	 B0140000		i0 = xmem[i0]			# LN: 52 | 
252   	 0043	 80880000		call (_cl_wavread_frame_rate)			# LN: 52 | 
253   	 0044	 90750108		i0 = i7 - (0x108)			# LN: 52 | 
254   	 0045	 98540000		xmem[i0] = a0h			# LN: 52 | 
255   	 0046				cline_52_0:			/* LN: 53 | CYCLE: 0 | RULES: () */ 
256   	 0046	 90750105		i0 = i7 - (0x105)			# LN: 53 | 
257   	 0047	 B0140000		i0 = xmem[i0]			# LN: 53 | 
258   	 0048	 80880000		call (_cl_wavread_number_of_frames)			# LN: 53 | 
259   	 0049	 90750109		i0 = i7 - (0x109)			# LN: 53 | 
260   	 004A	 98540000		xmem[i0] = a0h			# LN: 53 | 
261   	 004B				cline_53_0:			/* LN: 58 | CYCLE: 0 | RULES: () */ 
262   	 004B	 90750209		i0 = i7 - (521 - 0)			# LN: 58 | 
263   	 004C	 A1050000		i1 = (0) + (_string_const_2)			# LN: 58 | 
264   	 004D	 80880000		call (_strcpy)			# LN: 58 | 
265   	 004E				cline_58_0:			/* LN: 59 | CYCLE: 0 | RULES: () */ 
266   	 004E	 90750209		i0 = i7 - (521 - 0)			# LN: 59 | 
267   	 004F	 91750106		i1 = i7 - (0x106)			# LN: 59 | 
268   	 0050	 88140001		a0 = xmem[i1]			# LN: 59 | 
269   	 0051	 894A0003		uhalfword(a1) = (0x3)			# LN: 59 | 
270   	 0052	 91750107		i1 = i7 - (0x107)			# LN: 59 | 
271   	 0053	 18414409		a0 = xmem[i1]; a1 = a0 + a1			# LN: 59, 59 | 
272   	 0054	 91750108		i1 = i7 - (0x108)			# LN: 59 | 
273   	 0055	 8C140001		b0 = xmem[i1]			# LN: 59 | 
274   	 0056	 80880000		call (_cl_wavwrite_open)			# LN: 59 | 
275   	 0057	 98090030		AnyReg(i0, a0h)			# LN: 59 | 
276   	 0058	 9175020A		i1 = i7 - (0x20a)			# LN: 59 | 
277   	 0059	 B0540001		xmem[i1] = i0			# LN: 59 | 
278   	 005A				cline_59_0:			/* LN: 60 | CYCLE: 0 | RULES: () */ 
279   	 005A	 9075020A		i0 = i7 - (0x20a)			# LN: 60 | 
280   	 005B	 88140000		a0 = xmem[i0]			# LN: 60 | 
281   	 005C	 00004E80		a0 & a0			# LN: 60 | 
282   	 005D	 84480062		if (a != 0) jmp (else_1)			# LN: 60 | 
283   	 005E				cline_60_0:			/* LN: 62 | CYCLE: 0 | RULES: () */ 
284   	 005E	 A0050000		i0 = (0) + (_string_const_3)			# LN: 62 | 
285   	 005F	 80880000		call (_printf)			# LN: 62 | 
286   	 0060				cline_62_0:			/* LN: 63 | CYCLE: 0 | RULES: () */ 
287   	 0060	 886AFFFF		halfword(a0) = (0xffff)			# LN: 63 | 
288   	 0061	 800800DE		jmp (__epilogue_242)			# LN: 63 | 
289   	 0062				cline_63_0:			/* LN: 67 | CYCLE: 0 | RULES: () */ 
290   	 0062				endif_1:			/* LN: 60 | CYCLE: 0 | RULES: () */ 
291   	 0062				else_1:			/* LN: 60 | CYCLE: 0 | RULES: () */ 
292   	 0062	 88040000		a0 = xmem[__extractedConst_0_1 + 0]			# LN: 67 | 
293   	 0063	 98440000		xmem[_degree + 0] = a0h			# LN: 67 | 
294   	 0064				cline_67_0:			/* LN: 68 | CYCLE: 0 | RULES: () */ 
295   	 0064	 887A4000		a0 = (0x4000)			# LN: 68 | 
296   	 0065	 98440000		xmem[_gain + 0] = a0h			# LN: 68 | 
297   	 0066				cline_68_0:			/* LN: 69 | CYCLE: 0 | RULES: () */ 
298   	 0066	 884A0001		uhalfword(a0) = (0x1)			# LN: 69 | 
299   	 0067	 98440000		xmem[_invertEnable + 0] = a0h			# LN: 69 | 
300   	 0068				cline_69_0:			/* LN: 71 | CYCLE: 0 | RULES: () */ 
301   	 0068	 80880000		call (_audio_invert_init)			# LN: 71 | 
302   	 0069				cline_71_0:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
303   	 0069	 9075020B		i0 = i7 - (0x20b)			# LN: 80 | 
304   	 006A	 00004DC0		a0 = 0			# LN: 80 | 
305   	 006B	 98540000		xmem[i0] = a0h			# LN: 80 | 
306   	 006C				for_2:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
307   	 006C	 90750109		i0 = i7 - (0x109)			# LN: 80 | 
308   	 006D	 88140000		a0 = xmem[i0]			# LN: 80 | 
309   	 006E	 894A0010		uhalfword(a1) = (0x10)			# LN: 80 | 
310   	 006F	 80880000		call (__div)			# LN: 80 | 
311   	 0070	 9075020B		i0 = i7 - (0x20b)			# LN: 80 | 
312   	 0071	 89140000		a1 = xmem[i0]			# LN: 80 | 
313   	 0072	 00004F01		a1 - a0			# LN: 80 | 
314   	 0073	 84C800D6		if (a >= 0) jmp (for_end_2)			# LN: 80 | 
315   	 0074				cline_80_0:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
316   	 0074	 9075020C		i0 = i7 - (0x20c)			# LN: 82 | 
317   	 0075	 00004DC0		a0 = 0			# LN: 82 | 
318   	 0076	 98540000		xmem[i0] = a0h			# LN: 82 | 
319   	 0077	 8100009F		do (0x10), label_end_94			# LN: 82 | 
320   	 0078				cline_82_0:			/* LN: 84 | CYCLE: 0 | RULES: () */ 
321   	 0078				label_begin_94:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
322   	 0078	 9075020D		i0 = i7 - (0x20d)			# LN: 84 | 
323   	 0079	 00004DC0		a0 = 0			# LN: 84 | 
324   	 007A	 98540000		xmem[i0] = a0h			# LN: 84 | 
325   	 007B				for_4:			/* LN: 84 | CYCLE: 0 | RULES: () */ 
326   	 007B	 9075020D		i0 = i7 - (0x20d)			# LN: 84 | 
327   	 007C	 88140000		a0 = xmem[i0]			# LN: 84 | 
328   	 007D	 90750106		i0 = i7 - (0x106)			# LN: 84 | 
329   	 007E	 89140000		a1 = xmem[i0]			# LN: 84 | 
330   	 007F	 00004F08		a0 - a1			# LN: 84 | 
331   	 0080	 84C8009A		if (a >= 0) jmp (for_end_4)			# LN: 84 | 
332   	 0081				cline_84_0:			/* LN: 86 | CYCLE: 0 | RULES: () */ 
333   	 0081	 90750105		i0 = i7 - (0x105)			# LN: 86 | 
334   	 0082	 B0140000		i0 = xmem[i0]			# LN: 86 | 
335   	 0083	 80880000		call (_cl_wavread_recvsample)			# LN: 86 | 
336   	 0084	 9075020E		i0 = i7 - (0x20e)			# LN: 86 | 
337   	 0085	 98540000		xmem[i0] = a0h			# LN: 86 | 
338   	 0086				cline_86_0:			/* LN: 87 | CYCLE: 0 | RULES: () */ 
339   	 0086	 9075020D		i0 = i7 - (0x20d)			# LN: 87 | 
340   	 0087	 88140000		a0 = xmem[i0]			# LN: 87 | 
341   	 0088	 00004EC0		a0 = a0 << 4			# LN: 87 | 
342   	 0089	 48707FFF		i0 = a0			# LN: 87 | 
343   	 008A	 9175020C		i1 = i7 - (0x20c)			# LN: 87 | 
344   	 008B	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 87 | 
345   	 008C	 88140001		a0 = xmem[i1]			# LN: 87 | 
346   	 008D	 09707FFF		a1 = i0			# LN: 87 | 
347   	 008E	 00004480		a0 = a1 + a0			# LN: 87 | 
348   	 008F	 98090030		AnyReg(i0, a0h)			# LN: 87 | 
349   	 0090	 9175020E		i1 = i7 - (0x20e)			# LN: 87 | 
350   	 0091	 88140001		a0 = xmem[i1]			# LN: 87 | 
351   	 0092	 98D40000		ymem[i0] = a0h			# LN: 87 | 
352   	 0093				cline_87_0:			/* LN: 84 | CYCLE: 0 | RULES: () */ 
353   	 0093				init_latch_label_2:			/* LN: 88 | CYCLE: 0 | RULES: () */ 
354   	 0093	 9075020D		i0 = i7 - (0x20d)			# LN: 84 | 
355   	 0094	 88140000		a0 = xmem[i0]			# LN: 84 | 
356   	 0095	 894A0001		uhalfword(a1) = (0x1)			# LN: 84 | 
357   	 0096	 00004408		a0 = a0 + a1			# LN: 84 | 
358   	 0097	 9075020D		i0 = i7 - (0x20d)			# LN: 84 | 
359   	 0098	 98540000		xmem[i0] = a0h			# LN: 84 | 
360   	 0099	 8008007B		jmp (for_4)			# LN: 84 | 
361   	 009A				cline_84_1:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
362   	 009A				init_latch_label_3:			/* LN: 89 | CYCLE: 0 | RULES: () */ 
363   	 009A				for_end_4:			/* LN: 84 | CYCLE: 0 | RULES: () */ 
364   	 009A	 9075020C		i0 = i7 - (0x20c)			# LN: 82 | 
365   	 009B	 88140000		a0 = xmem[i0]			# LN: 82 | 
366   	 009C	 894A0001		uhalfword(a1) = (0x1)			# LN: 82 | 
367   	 009D	 00004408		a0 = a0 + a1			# LN: 82 | 
368   	 009E	 9075020C		i0 = i7 - (0x20c)			# LN: 82 | 
369   	 009F				label_end_94:			# LN: 82 | CYCLE: 5 | RULES: ()
370   	 009F	 98540000		xmem[i0] = a0h			# LN: 82 | 
371   	 00A0				cline_82_1:			/* LN: 91 | CYCLE: 0 | RULES: () */ 
372   	 00A0				for_end_3:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
373   	 00A0	 80880000		call (_processing)			# LN: 91 | 
374   	 00A1				cline_91_0:			/* LN: 93 | CYCLE: 0 | RULES: () */ 
375   	 00A1	 9075020C		i0 = i7 - (0x20c)			# LN: 93 | 
376   	 00A2	 00004DC0		a0 = 0			# LN: 93 | 
377   	 00A3	 98540000		xmem[i0] = a0h			# LN: 93 | 
378   	 00A4	 810000CE		do (0x10), label_end_95			# LN: 93 | 
379   	 00A5				cline_93_0:			/* LN: 95 | CYCLE: 0 | RULES: () */ 
380   	 00A5				label_begin_95:			/* LN: 93 | CYCLE: 0 | RULES: () */ 
381   	 00A5	 9075020D		i0 = i7 - (0x20d)			# LN: 95 | 
382   	 00A6	 00004DC0		a0 = 0			# LN: 95 | 
383   	 00A7	 98540000		xmem[i0] = a0h			# LN: 95 | 
384   	 00A8				for_6:			/* LN: 95 | CYCLE: 0 | RULES: () */ 
385   	 00A8	 90750106		i0 = i7 - (0x106)			# LN: 95 | 
386   	 00A9	 88140000		a0 = xmem[i0]			# LN: 95 | 
387   	 00AA	 894A0003		uhalfword(a1) = (0x3)			# LN: 95 | 
388   	 00AB	 00004408		a0 = a0 + a1			# LN: 95 | 
389   	 00AC	 9075020D		i0 = i7 - (0x20d)			# LN: 95 | 
390   	 00AD	 89140000		a1 = xmem[i0]			# LN: 95 | 
391   	 00AE	 00004F01		a1 - a0			# LN: 95 | 
392   	 00AF	 84C800C9		if (a >= 0) jmp (for_end_6)			# LN: 95 | 
393   	 00B0				cline_95_0:			/* LN: 97 | CYCLE: 0 | RULES: () */ 
394   	 00B0	 9075020D		i0 = i7 - (0x20d)			# LN: 97 | 
395   	 00B1	 88140000		a0 = xmem[i0]			# LN: 97 | 
396   	 00B2	 00004EC0		a0 = a0 << 4			# LN: 97 | 
397   	 00B3	 48707FFF		i0 = a0			# LN: 97 | 
398   	 00B4	 9175020C		i1 = i7 - (0x20c)			# LN: 97 | 
399   	 00B5	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 97 | 
400   	 00B6	 88140001		a0 = xmem[i1]			# LN: 97 | 
401   	 00B7	 09707FFF		a1 = i0			# LN: 97 | 
402   	 00B8	 00004480		a0 = a1 + a0			# LN: 97 | 
403   	 00B9	 98090030		AnyReg(i0, a0h)			# LN: 97 | 
404   	 00BA	 9175020E		i1 = i7 - (0x20e)			# LN: 97 | 
405   	 00BB	 88940000		a0 = ymem[i0]			# LN: 97 | 
406   	 00BC	 98540001		xmem[i1] = a0h			# LN: 97 | 
407   	 00BD				cline_97_0:			/* LN: 98 | CYCLE: 0 | RULES: () */ 
408   	 00BD	 9075020A		i0 = i7 - (0x20a)			# LN: 98 | 
409   	 00BE	 9175020E		i1 = i7 - (0x20e)			# LN: 98 | 
410   	 00BF	 88140001		a0 = xmem[i1]			# LN: 98 | 
411   	 00C0	 B0140000		i0 = xmem[i0]			# LN: 98 | 
412   	 00C1	 80880000		call (_cl_wavwrite_sendsample)			# LN: 98 | 
413   	 00C2				cline_98_0:			/* LN: 95 | CYCLE: 0 | RULES: () */ 
414   	 00C2				init_latch_label_4:			/* LN: 99 | CYCLE: 0 | RULES: () */ 
415   	 00C2	 9075020D		i0 = i7 - (0x20d)			# LN: 95 | 
416   	 00C3	 88140000		a0 = xmem[i0]			# LN: 95 | 
417   	 00C4	 894A0001		uhalfword(a1) = (0x1)			# LN: 95 | 
418   	 00C5	 00004408		a0 = a0 + a1			# LN: 95 | 
419   	 00C6	 9075020D		i0 = i7 - (0x20d)			# LN: 95 | 
420   	 00C7	 98540000		xmem[i0] = a0h			# LN: 95 | 
421   	 00C8	 800800A8		jmp (for_6)			# LN: 95 | 
422   	 00C9				cline_95_1:			/* LN: 93 | CYCLE: 0 | RULES: () */ 
423   	 00C9				init_latch_label_5:			/* LN: 100 | CYCLE: 0 | RULES: () */ 
424   	 00C9				for_end_6:			/* LN: 95 | CYCLE: 0 | RULES: () */ 
425   	 00C9	 9075020C		i0 = i7 - (0x20c)			# LN: 93 | 
426   	 00CA	 88140000		a0 = xmem[i0]			# LN: 93 | 
427   	 00CB	 894A0001		uhalfword(a1) = (0x1)			# LN: 93 | 
428   	 00CC	 00004408		a0 = a0 + a1			# LN: 93 | 
429   	 00CD	 9075020C		i0 = i7 - (0x20c)			# LN: 93 | 
430   	 00CE				label_end_95:			# LN: 93 | CYCLE: 5 | RULES: ()
431   	 00CE	 98540000		xmem[i0] = a0h			# LN: 93 | 
432   	 00CF				cline_93_1:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
433   	 00CF				init_latch_label_6:			/* LN: 101 | CYCLE: 0 | RULES: () */ 
434   	 00CF				for_end_5:			/* LN: 93 | CYCLE: 0 | RULES: () */ 
435   	 00CF	 9075020B		i0 = i7 - (0x20b)			# LN: 80 | 
436   	 00D0	 88140000		a0 = xmem[i0]			# LN: 80 | 
437   	 00D1	 894A0001		uhalfword(a1) = (0x1)			# LN: 80 | 
438   	 00D2	 00004408		a0 = a0 + a1			# LN: 80 | 
439   	 00D3	 9075020B		i0 = i7 - (0x20b)			# LN: 80 | 
440   	 00D4	 98540000		xmem[i0] = a0h			# LN: 80 | 
441   	 00D5	 8008006C		jmp (for_2)			# LN: 80 | 
442   	 00D6				cline_80_1:			/* LN: 106 | CYCLE: 0 | RULES: () */ 
443   	 00D6				for_end_2:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
444   	 00D6	 90750105		i0 = i7 - (0x105)			# LN: 106 | 
445   	 00D7	 B0140000		i0 = xmem[i0]			# LN: 106 | 
446   	 00D8	 80880000		call (_cl_wavread_close)			# LN: 106 | 
447   	 00D9				cline_106_0:			/* LN: 107 | CYCLE: 0 | RULES: () */ 
448   	 00D9	 9075020A		i0 = i7 - (0x20a)			# LN: 107 | 
449   	 00DA	 B0140000		i0 = xmem[i0]			# LN: 107 | 
450   	 00DB	 80880000		call (_cl_wavwrite_close)			# LN: 107 | 
451   	 00DC				cline_107_0:			/* LN: 110 | CYCLE: 0 | RULES: () */ 
452   	 00DC	 00004DC0		a0 = 0			# LN: 110 | 
453   	 00DD	 800800DE		jmp (__epilogue_242)			# LN: 110 | 
454   	 00DE				cline_110_0:			/* LN: 111 | CYCLE: 0 | RULES: () */ 
455   	 00DE				__epilogue_242:			/* LN: 111 | CYCLE: 0 | RULES: () */ 
456   	 00DE	 9775020E		i7 = i7 - (0x20e)			# LN: 111 | 
457   	 00DF	 02177FFF		i7 -= 1			# LN: 111 | 
458   	 00E0	 81880000		ret			# LN: 111 | 
459   						(null)
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           					 Define                 "a"
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_MUI_VERSION_                                                                   					 Define                 "020000"
_OVLY_                                                                          					 Define                 "standalone"
_OVLY_REVISION_                                                                 					 Define                 "020000"
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_SLOT_                                                                          					 Define                 "0"
_TARGET_FAMILY_                                                                 					 Define                 "crystal32"
_TOOLS_VERSION_                                                                 					 Define                 "0x0701"
_VERSION_                                                                       					 Define                 "00"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
__div                                                                           					 External   
__epilogue_242                                                                  			         Relocatable         main_GEN_0006:00DEH
__extractedConst_0_1                                                            			         Relocatable         main_GEN_0000:0000H
__start                                                                         					 External   
_audio_invert_init                                                              					 External   
_cl_wavread_bits_per_sample                                                     					 External   
_cl_wavread_close                                                               					 External   
_cl_wavread_frame_rate                                                          					 External   
_cl_wavread_getnchannels                                                        					 External   
_cl_wavread_number_of_frames                                                    					 External   
_cl_wavread_open                                                                					 External   
_cl_wavread_recvsample                                                          					 External   
_cl_wavwrite_close                                                              					 External   
_cl_wavwrite_open                                                               					 External   
_cl_wavwrite_sendsample                                                         					 External   
_degree                                                                         					 External   
_gain                                                                           					 External   
_invertEnable                                                                   					 External   
_main                                                                           			  Public Relocatable       main_GEN_0006:0000H
_printf                                                                         					 External   
_processing                                                                     					 External   
_sampleBuffer                                                                   			  Public Relocatable       main_GEN_0001:0000H
_strcpy                                                                         					 External   
_string_const_0                                                                 			         Relocatable         main_GEN_0002:0000H
_string_const_1                                                                 			         Relocatable         main_GEN_0003:0000H
_string_const_2                                                                 			         Relocatable         main_GEN_0004:0000H
_string_const_3                                                                 			         Relocatable         main_GEN_0005:0000H
cline_106_0                                                                     			  Unused Relocatable        main_GEN_0006:00D9H
cline_107_0                                                                     			  Unused Relocatable        main_GEN_0006:00DCH
cline_110_0                                                                     			  Unused Relocatable        main_GEN_0006:00DEH
cline_12_0                                                                      			  Unused Relocatable        main_GEN_0006:0007H
cline_29_0                                                                      			  Unused Relocatable        main_GEN_0006:000BH
cline_29_1                                                                      			  Unused Relocatable        main_GEN_0006:0027H
cline_31_0                                                                      			  Unused Relocatable        main_GEN_0006:000FH
cline_31_1                                                                      			  Unused Relocatable        main_GEN_0006:0021H
cline_33_0                                                                      			  Unused Relocatable        main_GEN_0006:001BH
cline_39_0                                                                      			  Unused Relocatable        main_GEN_0006:002AH
cline_40_0                                                                      			  Unused Relocatable        main_GEN_0006:002FH
cline_41_0                                                                      			  Unused Relocatable        main_GEN_0006:0033H
cline_43_0                                                                      			  Unused Relocatable        main_GEN_0006:0035H
cline_44_0                                                                      			  Unused Relocatable        main_GEN_0006:0037H
cline_50_0                                                                      			  Unused Relocatable        main_GEN_0006:003CH
cline_51_0                                                                      			  Unused Relocatable        main_GEN_0006:0041H
cline_52_0                                                                      			  Unused Relocatable        main_GEN_0006:0046H
cline_53_0                                                                      			  Unused Relocatable        main_GEN_0006:004BH
cline_58_0                                                                      			  Unused Relocatable        main_GEN_0006:004EH
cline_59_0                                                                      			  Unused Relocatable        main_GEN_0006:005AH
cline_60_0                                                                      			  Unused Relocatable        main_GEN_0006:005EH
cline_62_0                                                                      			  Unused Relocatable        main_GEN_0006:0060H
cline_63_0                                                                      			  Unused Relocatable        main_GEN_0006:0062H
cline_67_0                                                                      			  Unused Relocatable        main_GEN_0006:0064H
cline_68_0                                                                      			  Unused Relocatable        main_GEN_0006:0066H
cline_69_0                                                                      			  Unused Relocatable        main_GEN_0006:0068H
cline_71_0                                                                      			  Unused Relocatable        main_GEN_0006:0069H
cline_80_0                                                                      			  Unused Relocatable        main_GEN_0006:0074H
cline_80_1                                                                      			  Unused Relocatable        main_GEN_0006:00D6H
cline_82_0                                                                      			  Unused Relocatable        main_GEN_0006:0078H
cline_82_1                                                                      			  Unused Relocatable        main_GEN_0006:00A0H
cline_84_0                                                                      			  Unused Relocatable        main_GEN_0006:0081H
cline_84_1                                                                      			  Unused Relocatable        main_GEN_0006:009AH
cline_86_0                                                                      			  Unused Relocatable        main_GEN_0006:0086H
cline_87_0                                                                      			  Unused Relocatable        main_GEN_0006:0093H
cline_91_0                                                                      			  Unused Relocatable        main_GEN_0006:00A1H
cline_93_0                                                                      			  Unused Relocatable        main_GEN_0006:00A5H
cline_93_1                                                                      			  Unused Relocatable        main_GEN_0006:00CFH
cline_95_0                                                                      			  Unused Relocatable        main_GEN_0006:00B0H
cline_95_1                                                                      			  Unused Relocatable        main_GEN_0006:00C9H
cline_97_0                                                                      			  Unused Relocatable        main_GEN_0006:00BDH
cline_98_0                                                                      			  Unused Relocatable        main_GEN_0006:00C2H
dummy                                                                           			  Unused Number				     0 (0H)
else_0                                                                          			         Relocatable         main_GEN_0006:0037H
else_1                                                                          			         Relocatable         main_GEN_0006:0062H
endif_0                                                                         			  Unused Relocatable        main_GEN_0006:0037H
endif_1                                                                         			  Unused Relocatable        main_GEN_0006:0062H
for_2                                                                           			         Relocatable         main_GEN_0006:006CH
for_4                                                                           			         Relocatable         main_GEN_0006:007BH
for_6                                                                           			         Relocatable         main_GEN_0006:00A8H
for_end_0                                                                       			  Unused Relocatable        main_GEN_0006:0027H
for_end_1                                                                       			  Unused Relocatable        main_GEN_0006:0021H
for_end_2                                                                       			         Relocatable         main_GEN_0006:00D6H
for_end_3                                                                       			  Unused Relocatable        main_GEN_0006:00A0H
for_end_4                                                                       			         Relocatable         main_GEN_0006:009AH
for_end_5                                                                       			  Unused Relocatable        main_GEN_0006:00CFH
for_end_6                                                                       			         Relocatable         main_GEN_0006:00C9H
init_latch_label_0                                                              			  Unused Relocatable        main_GEN_0006:001BH
init_latch_label_1                                                              			  Unused Relocatable        main_GEN_0006:0021H
init_latch_label_2                                                              			  Unused Relocatable        main_GEN_0006:0093H
init_latch_label_3                                                              			  Unused Relocatable        main_GEN_0006:009AH
init_latch_label_4                                                              			  Unused Relocatable        main_GEN_0006:00C2H
init_latch_label_5                                                              			  Unused Relocatable        main_GEN_0006:00C9H
init_latch_label_6                                                              			  Unused Relocatable        main_GEN_0006:00CFH
label_begin_92                                                                  			  Unused Relocatable        main_GEN_0006:000FH
label_begin_93                                                                  			  Unused Relocatable        main_GEN_0006:000BH
label_begin_94                                                                  			  Unused Relocatable        main_GEN_0006:0078H
label_begin_95                                                                  			  Unused Relocatable        main_GEN_0006:00A5H
label_end_92                                                                    			         Relocatable         main_GEN_0006:0020H
label_end_93                                                                    			         Relocatable         main_GEN_0006:0026H
label_end_94                                                                    			         Relocatable         main_GEN_0006:009FH
label_end_95                                                                    			         Relocatable         main_GEN_0006:00CEH

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0001H	 main_GEN_0000                           			 X_OVLY                                  
0080H	 main_GEN_0001                           			 Y_OVLY                                  
0014H	 main_GEN_0002                           			 X_OVLY                                  
0021H	 main_GEN_0003                           			 X_OVLY                                  
0017H	 main_GEN_0004                           			 X_OVLY                                  
0021H	 main_GEN_0005                           			 X_OVLY                                  
00E1H	 main_GEN_0006                           			 CODE_OVLY                               
